#
# A few test of extrema values computations over freeforms.
#
#				gershon Elber, December 2013
#

ComputeJacobianExtrema = function( tv ): i: ex: exList: Pt:
    exList = ffextrema( tvjacobian( tv ), false ):
    return = nil():
    for ( i = 1, 1, sizeof( exList ),
        ex = nth( exList, i ):
	Pt = teval( tv, coord( ex, 1 ), coord( ex, 2 ), coord( ex, 3 ) ):
	attrib( Pt, "extreme_type", GetAttr( ex, "extreme_type" ) ):
        snoc( Pt * tx( 0 ), return ) );

#############################################################################

circ = circle( vector( 0.0, 0.0, 0.0 ), 1.0 ) * rz( 45 ) * rx( 45 );
color( circ, red );

ex1 = ffextrema( circ, true );

interact( list( axes, circ, ex1 ) );

crv2 = cbspline( 3,
                 list( ctlpt( E2, 1.7, 0.0 ),
                       ctlpt( E2, 0.7, 0.7 ),
                       ctlpt( E2, 1.7, 0.3 ),
                       ctlpt( E2, 1.5, 0.8 ),
                       ctlpt( E2, 1.6, 1.0 ) ),
                 list( KV_OPEN ) );
color( crv2, red );

ex2 = ffextrema( crv2, true );

interact( list( axes, crv2, ex2 ) );

save( "extrema1", list( list( circ, ex1 ) * tx( -1 ),
			list( crv2, ex2 ) * tx( 1 ) ) );
free( circ );
free( crv2 );

#################################

srf1 = sbezier( list( list( ctlpt( E2, 0.0, 0.0 ),
		            ctlpt( E2, 2.0, 1.0 ),
		            ctlpt( E3, 0.0, 2.0, 1.5 ) ),
	              list( ctlpt( E2, 1.0, 0.0 ),
		            ctlpt( E2, -1.0, 1.0 ),
		            ctlpt( E3, 1.0, 2.0, -0.5 ) ) ) ):
color( srf1, red );

ex1 = ffextrema( Srf1, true );

interact( list( axes, srf1, ex1 ) );


srf2 = sbspline( 3, 4,
		 list( list( ctlpt( E3, 0.0, 0.0, 1.0 ),
		             ctlpt( E2, 0.0, 1.0 ),
		             ctlpt( E3, 0.0, 2.0, 1.0 ) ),
        	       list( ctlpt( E2, 1.0, 0.0 ),
		             ctlpt( E3, 1.0, 1.0, 2.0 ),
		             ctlpt( E2, 1.0, 2.0 ) ),
        	       list( ctlpt( E3, 2.0, 0.0, 2.0 ),
	        	     ctlpt( E2, 2.0, 1.0 ),
		             ctlpt( E3, 2.0, 2.0, 2.0 ) ),
        	       list( ctlpt( E2, 3.0, 0.0 ),
	        	     ctlpt( E3, 3.0, 1.0, 2.0 ),
		             ctlpt( E2, 3.0, 2.0 ) ),
        	       list( ctlpt( E3, 4.0, 0.0, 1.0 ),
	        	     ctlpt( E2, 4.0, 1.0 ),
		             ctlpt( E3, 4.0, 2.0, 1.0 ) ) ),
		 list( list( KV_OPEN ),
		       list( KV_OPEN ) ) ) * ry( 90 );
color( srf2, red );

ex2 = ffextrema( Srf2, true );

interact( list( axes, srf2, ex2 ) );

save( "extrema2", list( list( srf1, ex1 ) * tx( -1 ),
			list( srf2, ex2 ) * tx( 2 ) ) );
free( srf1 );
free( srf2 );

#################################

tv1 = tbspline( 3, 3, 3,
		list( list( list( ctlpt( E3, 0.1, 0.1, 0.0 ),
				  ctlpt( E3, 0.2, 0.5, 1.1 ),
				  ctlpt( E3, 0.3, 0.1, 2.2 ) ),
			    list( ctlpt( E3, 0.4, 1.3, 0.5 ),
				  ctlpt( E3, 0.5, 1.7, 1.7 ),
				  ctlpt( E3, 0.6, 1.3, 2.9 ) ),
			    list( ctlpt( E3, 0.7, 2.4, 0.5 ),
				  ctlpt( E3, 0.8, 2.6, 1.4 ),
				  ctlpt( E3, 0.9, 2.8, 2.3 ) ) ),
		      list( list( ctlpt( E3, 1.1, 0.1, 0.5 ),
				  ctlpt( E3, 1.3, 0.2, 1.7 ),
				  ctlpt( E3, 1.5, 0.3, 2.9 ) ),
			    list( ctlpt( E3, 1.7, 1.2, 0.0 ),
				  ctlpt( E3, 9, 1.4, 1.2 ),
				  ctlpt( E3, 1.2, 1.6, 2.4 ) ),
			    list( ctlpt( E3, 1.4, 2.3, 0.9 ),
				  ctlpt( E3, 1.6, 2.5, 1.7 ),
				  ctlpt( E3, 1.8, 2.7, 2.5 ) ) ),
		      list( list( ctlpt( E3, 2.8, 0.1, 0.4 ),
				  ctlpt( E3, 2.6, 0.7, 1.3 ),
				  ctlpt( E3, 2.4, 0.2, 2.2 ) ),
			    list( ctlpt( E3, 2.2, 1.1, 0.4 ),
				  ctlpt( E3, 2.9, 1.2, 1.5 ),
				  ctlpt( E3, 2.7, 1.3, 2.6 ) ),
			    list( ctlpt( E3, 2.5, 2.9, 0.7 ),
				  ctlpt( E3, 2.3, 2.8, 1.7 ),
				  ctlpt( E3, 2.1, 2.7, 2.7 ) ) ) ),
		list( list( KV_OPEN ),
		      list( KV_OPEN ),
		      list( KV_OPEN ) ) );
color( tv1, red );

ex1 = ffextrema( tv1, true );
color( ex1, yellow );

ex1j = ComputeJacobianExtrema( tv1 );
color( ex1j, cyan );

interact( list( axes, tv1, ex1, ex1j ) );

s1 = planeSrf( 0.01, 0.1, 1.03, 0.9 ):
s2 = s1 * rx( 2 ) * ry( 3 ) * tz( 1 ):
tv2 = RULEDTV( s1, s2 );

free( s1 ):
free( s2 ):
tv2 = traise( traise( traise( tv2, row, 4 ), col, 4 ), depth, 4 );

tv2 = teditpt( tv2, ctlpt( E3, 1.6, 1.8, 1.7 ), 1, 1, 1 ):
tv2 = teditpt( tv2, ctlpt( E3, 1.7, 0.1, 2.0 ), 1, 2, 1 ):
tv2 = teditpt( tv2, ctlpt( E3, 0.1, 2.0, 1.8 ), 2, 1, 1 ):
tv2 = teditpt( tv2, ctlpt( E3, 1/3, 1/3, 2.2 ), 2, 2, 1 ):

tv2 = teditpt( tv2, ctlpt( E3, 1.5, 1.9, 1/3 ), 1, 1, 2 ):
tv2 = teditpt( tv2, ctlpt( E3, 2.0, 1/3, 1/3 ), 1, 2, 2 ):
tv2 = teditpt( tv2, ctlpt( E3, 1/3, 2.2, 1/3 ), 2, 1, 2 ):
tv2 = teditpt( tv2, ctlpt( E3, 1/3, 1/3, 1/3 ), 2, 2, 2 ):

color( tv2, red );

ex2 = ComputeJacobianExtrema( tv2 );

interact( list( tv2, ex2 ) );

save( "extrema3", list( list( tv1, ex1, ex1j ) * tx( -1 ),
			list( tv2, ex2 ) * tx( 2 ) ) );

#################################

free( tv1 );
free( tv2 );
free( ex1 );
free( ex1j );
free( ex2 );
